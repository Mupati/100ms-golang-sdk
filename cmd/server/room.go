package main

import (
	"context"
	"encoding/json"
	"net/url"
	"strconv"

	"os"

	"connectrpc.com/connect"

	roomv1 "github.com/Mupati/100ms-golang-server-sdk/gen/room/v1" // generated by protoc-gen-go
	// generated by protoc-gen-connect-go
)

type RoomServer struct{}

func (s *RoomServer) GetRoom(ctx context.Context, req *connect.Request[roomv1.GetRoomRequest]) (*connect.Response[roomv1.GetRoomResponse], error) {
	resp, err := PerformHTTPCall(os.Getenv("BASE_URL")+"rooms/"+req.Msg.RoomId, "GET", nil)
	if err != nil {
		return nil, err
	}
	var hmsRoom roomv1.HMSRoom
	err = json.Unmarshal([]byte(resp), &hmsRoom)
	if err != nil {
		return nil, err
	}
	res := connect.NewResponse(
		&roomv1.GetRoomResponse{
			Room: &hmsRoom,
		},
	)
	return res, nil
}

func (s *RoomServer) ListRooms(ctx context.Context, req *connect.Request[roomv1.ListRoomsRequest]) (*connect.Response[roomv1.ListRoomsResponse], error) {
	qs := url.Values{}
	qs.Add("name", req.Msg.Filters.Name)
	qs.Add("enabled", strconv.FormatBool(req.Msg.Filters.Enabled))
	qs.Add("before", req.Msg.Filters.Before.String()) // Todo: fix timestamp issues or revert to string in .proto
	qs.Add("after", req.Msg.Filters.After.String())

	resp, err := PerformHTTPCall(os.Getenv("BASE_URL")+"rooms"+"?"+qs.Encode(), "GET", nil)
	if err != nil {
		return nil, err
	}

	var hmsRoomList roomv1.HMSRoomList
	err = json.Unmarshal([]byte(resp), &hmsRoomList)
	if err != nil {
		return nil, err
	}
	res := connect.NewResponse(
		&roomv1.ListRoomsResponse{
			Rooms: &hmsRoomList,
		},
	)
	return res, nil
}

func (s *RoomServer) CreateRoom(ctx context.Context, req *connect.Request[roomv1.CreateRoomRequest]) (*connect.Response[roomv1.CreateRoomResponse], error) {

	payload, err := StructToJSONPayload(req.Msg.Room)
	if err != nil {
		return nil, err
	}

	resp, err := PerformHTTPCall(os.Getenv("BASE_URL")+"rooms", "POST", payload)
	if err != nil {
		return nil, err
	}

	var hmsRoom roomv1.HMSRoom
	err = json.Unmarshal([]byte(resp), &hmsRoom)
	if err != nil {
		return nil, err
	}

	res := connect.NewResponse(
		&roomv1.CreateRoomResponse{
			Room: &hmsRoom,
		},
	)
	return res, nil
}

func (s *RoomServer) UpdateRoom(ctx context.Context, req *connect.Request[roomv1.UpdateRoomRequest]) (*connect.Response[roomv1.UpdateRoomResponse], error) {
	payload, err := StructToJSONPayload(req.Msg.Room)
	if err != nil {
		return nil, err
	}
	resp, err := PerformHTTPCall(os.Getenv("BASE_URL")+"rooms/"+req.Msg.RoomId, "POST", payload)
	if err != nil {
		return nil, err
	}
	var hmsRoom roomv1.HMSRoom
	err = json.Unmarshal([]byte(resp), &hmsRoom)
	if err != nil {
		return nil, err
	}
	res := connect.NewResponse(
		&roomv1.UpdateRoomResponse{
			Room: &hmsRoom,
		},
	)
	return res, nil
}

func (s *RoomServer) EnableRoom(ctx context.Context, req *connect.Request[roomv1.EnableRoomRequest]) (*connect.Response[roomv1.EnableRoomResponse], error) {

	payload, err := StructToJSONPayload(map[string]bool{"enabled": true})
	if err != nil {
		return nil, err
	}
	resp, err := PerformHTTPCall(os.Getenv("BASE_URL")+"rooms/"+req.Msg.RoomId, "POST", payload)
	if err != nil {
		return nil, err
	}

	var enabledRoomResponse roomv1.HMSRoom
	err = json.Unmarshal([]byte(resp), &enabledRoomResponse)
	if err != nil {
		return nil, err
	}

	res := connect.NewResponse(
		&roomv1.EnableRoomResponse{
			Response: &enabledRoomResponse,
		},
	)

	return res, nil
}

func (s *RoomServer) DisableRoom(ctx context.Context, req *connect.Request[roomv1.DisableRoomRequest]) (*connect.Response[roomv1.DisableRoomResponse], error) {
	payload, err := StructToJSONPayload(map[string]bool{"enabled": false})
	if err != nil {
		return nil, err
	}
	resp, err := PerformHTTPCall(os.Getenv("BASE_URL")+"rooms/"+req.Msg.RoomId, "POST", payload)
	if err != nil {
		return nil, err
	}

	var disabledRoomResponse roomv1.HMSRoom
	err = json.Unmarshal([]byte(resp), &disabledRoomResponse)
	if err != nil {
		return nil, err
	}

	res := connect.NewResponse(
		&roomv1.DisableRoomResponse{
			Response: &disabledRoomResponse,
		},
	)
	return res, nil
}
