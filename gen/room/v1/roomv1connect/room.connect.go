// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: room/v1/room.proto

package roomv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Mupati/100ms-golang-server-sdk/gen/room/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoomServiceName is the fully-qualified name of the RoomService service.
	RoomServiceName = "room.v1.RoomService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomServiceGetRoomProcedure is the fully-qualified name of the RoomService's GetRoom RPC.
	RoomServiceGetRoomProcedure = "/room.v1.RoomService/GetRoom"
	// RoomServiceListRoomsProcedure is the fully-qualified name of the RoomService's ListRooms RPC.
	RoomServiceListRoomsProcedure = "/room.v1.RoomService/ListRooms"
	// RoomServiceCreateRoomProcedure is the fully-qualified name of the RoomService's CreateRoom RPC.
	RoomServiceCreateRoomProcedure = "/room.v1.RoomService/CreateRoom"
	// RoomServiceUpdateRoomProcedure is the fully-qualified name of the RoomService's UpdateRoom RPC.
	RoomServiceUpdateRoomProcedure = "/room.v1.RoomService/UpdateRoom"
	// RoomServiceEnableRoomProcedure is the fully-qualified name of the RoomService's EnableRoom RPC.
	RoomServiceEnableRoomProcedure = "/room.v1.RoomService/EnableRoom"
	// RoomServiceDisableRoomProcedure is the fully-qualified name of the RoomService's DisableRoom RPC.
	RoomServiceDisableRoomProcedure = "/room.v1.RoomService/DisableRoom"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	roomServiceServiceDescriptor           = v1.File_room_v1_room_proto.Services().ByName("RoomService")
	roomServiceGetRoomMethodDescriptor     = roomServiceServiceDescriptor.Methods().ByName("GetRoom")
	roomServiceListRoomsMethodDescriptor   = roomServiceServiceDescriptor.Methods().ByName("ListRooms")
	roomServiceCreateRoomMethodDescriptor  = roomServiceServiceDescriptor.Methods().ByName("CreateRoom")
	roomServiceUpdateRoomMethodDescriptor  = roomServiceServiceDescriptor.Methods().ByName("UpdateRoom")
	roomServiceEnableRoomMethodDescriptor  = roomServiceServiceDescriptor.Methods().ByName("EnableRoom")
	roomServiceDisableRoomMethodDescriptor = roomServiceServiceDescriptor.Methods().ByName("DisableRoom")
)

// RoomServiceClient is a client for the room.v1.RoomService service.
type RoomServiceClient interface {
	GetRoom(context.Context, *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error)
	ListRooms(context.Context, *connect.Request[v1.ListRoomsRequest]) (*connect.Response[v1.ListRoomsResponse], error)
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error)
	UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error)
	EnableRoom(context.Context, *connect.Request[v1.EnableRoomRequest]) (*connect.Response[v1.EnableRoomResponse], error)
	DisableRoom(context.Context, *connect.Request[v1.DisableRoomRequest]) (*connect.Response[v1.DisableRoomResponse], error)
}

// NewRoomServiceClient constructs a client for the room.v1.RoomService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roomServiceClient{
		getRoom: connect.NewClient[v1.GetRoomRequest, v1.GetRoomResponse](
			httpClient,
			baseURL+RoomServiceGetRoomProcedure,
			connect.WithSchema(roomServiceGetRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRooms: connect.NewClient[v1.ListRoomsRequest, v1.ListRoomsResponse](
			httpClient,
			baseURL+RoomServiceListRoomsProcedure,
			connect.WithSchema(roomServiceListRoomsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRoom: connect.NewClient[v1.CreateRoomRequest, v1.CreateRoomResponse](
			httpClient,
			baseURL+RoomServiceCreateRoomProcedure,
			connect.WithSchema(roomServiceCreateRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRoom: connect.NewClient[v1.UpdateRoomRequest, v1.UpdateRoomResponse](
			httpClient,
			baseURL+RoomServiceUpdateRoomProcedure,
			connect.WithSchema(roomServiceUpdateRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableRoom: connect.NewClient[v1.EnableRoomRequest, v1.EnableRoomResponse](
			httpClient,
			baseURL+RoomServiceEnableRoomProcedure,
			connect.WithSchema(roomServiceEnableRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableRoom: connect.NewClient[v1.DisableRoomRequest, v1.DisableRoomResponse](
			httpClient,
			baseURL+RoomServiceDisableRoomProcedure,
			connect.WithSchema(roomServiceDisableRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomServiceClient implements RoomServiceClient.
type roomServiceClient struct {
	getRoom     *connect.Client[v1.GetRoomRequest, v1.GetRoomResponse]
	listRooms   *connect.Client[v1.ListRoomsRequest, v1.ListRoomsResponse]
	createRoom  *connect.Client[v1.CreateRoomRequest, v1.CreateRoomResponse]
	updateRoom  *connect.Client[v1.UpdateRoomRequest, v1.UpdateRoomResponse]
	enableRoom  *connect.Client[v1.EnableRoomRequest, v1.EnableRoomResponse]
	disableRoom *connect.Client[v1.DisableRoomRequest, v1.DisableRoomResponse]
}

// GetRoom calls room.v1.RoomService.GetRoom.
func (c *roomServiceClient) GetRoom(ctx context.Context, req *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error) {
	return c.getRoom.CallUnary(ctx, req)
}

// ListRooms calls room.v1.RoomService.ListRooms.
func (c *roomServiceClient) ListRooms(ctx context.Context, req *connect.Request[v1.ListRoomsRequest]) (*connect.Response[v1.ListRoomsResponse], error) {
	return c.listRooms.CallUnary(ctx, req)
}

// CreateRoom calls room.v1.RoomService.CreateRoom.
func (c *roomServiceClient) CreateRoom(ctx context.Context, req *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// UpdateRoom calls room.v1.RoomService.UpdateRoom.
func (c *roomServiceClient) UpdateRoom(ctx context.Context, req *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error) {
	return c.updateRoom.CallUnary(ctx, req)
}

// EnableRoom calls room.v1.RoomService.EnableRoom.
func (c *roomServiceClient) EnableRoom(ctx context.Context, req *connect.Request[v1.EnableRoomRequest]) (*connect.Response[v1.EnableRoomResponse], error) {
	return c.enableRoom.CallUnary(ctx, req)
}

// DisableRoom calls room.v1.RoomService.DisableRoom.
func (c *roomServiceClient) DisableRoom(ctx context.Context, req *connect.Request[v1.DisableRoomRequest]) (*connect.Response[v1.DisableRoomResponse], error) {
	return c.disableRoom.CallUnary(ctx, req)
}

// RoomServiceHandler is an implementation of the room.v1.RoomService service.
type RoomServiceHandler interface {
	GetRoom(context.Context, *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error)
	ListRooms(context.Context, *connect.Request[v1.ListRoomsRequest]) (*connect.Response[v1.ListRoomsResponse], error)
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error)
	UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error)
	EnableRoom(context.Context, *connect.Request[v1.EnableRoomRequest]) (*connect.Response[v1.EnableRoomResponse], error)
	DisableRoom(context.Context, *connect.Request[v1.DisableRoomRequest]) (*connect.Response[v1.DisableRoomResponse], error)
}

// NewRoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomServiceHandler(svc RoomServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomServiceGetRoomHandler := connect.NewUnaryHandler(
		RoomServiceGetRoomProcedure,
		svc.GetRoom,
		connect.WithSchema(roomServiceGetRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceListRoomsHandler := connect.NewUnaryHandler(
		RoomServiceListRoomsProcedure,
		svc.ListRooms,
		connect.WithSchema(roomServiceListRoomsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceCreateRoomHandler := connect.NewUnaryHandler(
		RoomServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(roomServiceCreateRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceUpdateRoomHandler := connect.NewUnaryHandler(
		RoomServiceUpdateRoomProcedure,
		svc.UpdateRoom,
		connect.WithSchema(roomServiceUpdateRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceEnableRoomHandler := connect.NewUnaryHandler(
		RoomServiceEnableRoomProcedure,
		svc.EnableRoom,
		connect.WithSchema(roomServiceEnableRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceDisableRoomHandler := connect.NewUnaryHandler(
		RoomServiceDisableRoomProcedure,
		svc.DisableRoom,
		connect.WithSchema(roomServiceDisableRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/room.v1.RoomService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomServiceGetRoomProcedure:
			roomServiceGetRoomHandler.ServeHTTP(w, r)
		case RoomServiceListRoomsProcedure:
			roomServiceListRoomsHandler.ServeHTTP(w, r)
		case RoomServiceCreateRoomProcedure:
			roomServiceCreateRoomHandler.ServeHTTP(w, r)
		case RoomServiceUpdateRoomProcedure:
			roomServiceUpdateRoomHandler.ServeHTTP(w, r)
		case RoomServiceEnableRoomProcedure:
			roomServiceEnableRoomHandler.ServeHTTP(w, r)
		case RoomServiceDisableRoomProcedure:
			roomServiceDisableRoomHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomServiceHandler struct{}

func (UnimplementedRoomServiceHandler) GetRoom(context.Context, *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.GetRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) ListRooms(context.Context, *connect.Request[v1.ListRoomsRequest]) (*connect.Response[v1.ListRoomsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.ListRooms is not implemented"))
}

func (UnimplementedRoomServiceHandler) CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.CreateRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.UpdateRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) EnableRoom(context.Context, *connect.Request[v1.EnableRoomRequest]) (*connect.Response[v1.EnableRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.EnableRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) DisableRoom(context.Context, *connect.Request[v1.DisableRoomRequest]) (*connect.Response[v1.DisableRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.DisableRoom is not implemented"))
}
