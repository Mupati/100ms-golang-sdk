// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: roomcodes/v1/roomcodes.proto

package roomcodesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Mupati/100ms-golang-server-sdk/gen/roomcodes/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoomCodesServiceName is the fully-qualified name of the RoomCodesService service.
	RoomCodesServiceName = "roomcodes.v1.RoomCodesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomCodesServiceGetRoomCodesProcedure is the fully-qualified name of the RoomCodesService's
	// GetRoomCodes RPC.
	RoomCodesServiceGetRoomCodesProcedure = "/roomcodes.v1.RoomCodesService/GetRoomCodes"
	// RoomCodesServiceCreateRoomCodeProcedure is the fully-qualified name of the RoomCodesService's
	// CreateRoomCode RPC.
	RoomCodesServiceCreateRoomCodeProcedure = "/roomcodes.v1.RoomCodesService/CreateRoomCode"
	// RoomCodesServiceCreateRoomCodeForRoleProcedure is the fully-qualified name of the
	// RoomCodesService's CreateRoomCodeForRole RPC.
	RoomCodesServiceCreateRoomCodeForRoleProcedure = "/roomcodes.v1.RoomCodesService/CreateRoomCodeForRole"
	// RoomCodesServiceUpdateRoomCodeProcedure is the fully-qualified name of the RoomCodesService's
	// UpdateRoomCode RPC.
	RoomCodesServiceUpdateRoomCodeProcedure = "/roomcodes.v1.RoomCodesService/UpdateRoomCode"
	// RoomCodesServiceCreateShortCodeAuthTokenProcedure is the fully-qualified name of the
	// RoomCodesService's CreateShortCodeAuthToken RPC.
	RoomCodesServiceCreateShortCodeAuthTokenProcedure = "/roomcodes.v1.RoomCodesService/CreateShortCodeAuthToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	roomCodesServiceServiceDescriptor                        = v1.File_roomcodes_v1_roomcodes_proto.Services().ByName("RoomCodesService")
	roomCodesServiceGetRoomCodesMethodDescriptor             = roomCodesServiceServiceDescriptor.Methods().ByName("GetRoomCodes")
	roomCodesServiceCreateRoomCodeMethodDescriptor           = roomCodesServiceServiceDescriptor.Methods().ByName("CreateRoomCode")
	roomCodesServiceCreateRoomCodeForRoleMethodDescriptor    = roomCodesServiceServiceDescriptor.Methods().ByName("CreateRoomCodeForRole")
	roomCodesServiceUpdateRoomCodeMethodDescriptor           = roomCodesServiceServiceDescriptor.Methods().ByName("UpdateRoomCode")
	roomCodesServiceCreateShortCodeAuthTokenMethodDescriptor = roomCodesServiceServiceDescriptor.Methods().ByName("CreateShortCodeAuthToken")
)

// RoomCodesServiceClient is a client for the roomcodes.v1.RoomCodesService service.
type RoomCodesServiceClient interface {
	GetRoomCodes(context.Context, *connect.Request[v1.GetRoomCodesRequest]) (*connect.Response[v1.GetRoomCodesResponse], error)
	CreateRoomCode(context.Context, *connect.Request[v1.CreateRoomCodeRequest]) (*connect.Response[v1.CreateRoomCodeResponse], error)
	CreateRoomCodeForRole(context.Context, *connect.Request[v1.CreateRoomCodeForRoleRequest]) (*connect.Response[v1.CreateRoomCodeForRoleResponse], error)
	UpdateRoomCode(context.Context, *connect.Request[v1.UpdateRoomCodeRequest]) (*connect.Response[v1.UpdateRoomCodeResponse], error)
	CreateShortCodeAuthToken(context.Context, *connect.Request[v1.CreateShortCodeAuthTokenRequest]) (*connect.Response[v1.CreateShortCodeAuthTokenResponse], error)
}

// NewRoomCodesServiceClient constructs a client for the roomcodes.v1.RoomCodesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomCodesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomCodesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roomCodesServiceClient{
		getRoomCodes: connect.NewClient[v1.GetRoomCodesRequest, v1.GetRoomCodesResponse](
			httpClient,
			baseURL+RoomCodesServiceGetRoomCodesProcedure,
			connect.WithSchema(roomCodesServiceGetRoomCodesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRoomCode: connect.NewClient[v1.CreateRoomCodeRequest, v1.CreateRoomCodeResponse](
			httpClient,
			baseURL+RoomCodesServiceCreateRoomCodeProcedure,
			connect.WithSchema(roomCodesServiceCreateRoomCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRoomCodeForRole: connect.NewClient[v1.CreateRoomCodeForRoleRequest, v1.CreateRoomCodeForRoleResponse](
			httpClient,
			baseURL+RoomCodesServiceCreateRoomCodeForRoleProcedure,
			connect.WithSchema(roomCodesServiceCreateRoomCodeForRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRoomCode: connect.NewClient[v1.UpdateRoomCodeRequest, v1.UpdateRoomCodeResponse](
			httpClient,
			baseURL+RoomCodesServiceUpdateRoomCodeProcedure,
			connect.WithSchema(roomCodesServiceUpdateRoomCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createShortCodeAuthToken: connect.NewClient[v1.CreateShortCodeAuthTokenRequest, v1.CreateShortCodeAuthTokenResponse](
			httpClient,
			baseURL+RoomCodesServiceCreateShortCodeAuthTokenProcedure,
			connect.WithSchema(roomCodesServiceCreateShortCodeAuthTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomCodesServiceClient implements RoomCodesServiceClient.
type roomCodesServiceClient struct {
	getRoomCodes             *connect.Client[v1.GetRoomCodesRequest, v1.GetRoomCodesResponse]
	createRoomCode           *connect.Client[v1.CreateRoomCodeRequest, v1.CreateRoomCodeResponse]
	createRoomCodeForRole    *connect.Client[v1.CreateRoomCodeForRoleRequest, v1.CreateRoomCodeForRoleResponse]
	updateRoomCode           *connect.Client[v1.UpdateRoomCodeRequest, v1.UpdateRoomCodeResponse]
	createShortCodeAuthToken *connect.Client[v1.CreateShortCodeAuthTokenRequest, v1.CreateShortCodeAuthTokenResponse]
}

// GetRoomCodes calls roomcodes.v1.RoomCodesService.GetRoomCodes.
func (c *roomCodesServiceClient) GetRoomCodes(ctx context.Context, req *connect.Request[v1.GetRoomCodesRequest]) (*connect.Response[v1.GetRoomCodesResponse], error) {
	return c.getRoomCodes.CallUnary(ctx, req)
}

// CreateRoomCode calls roomcodes.v1.RoomCodesService.CreateRoomCode.
func (c *roomCodesServiceClient) CreateRoomCode(ctx context.Context, req *connect.Request[v1.CreateRoomCodeRequest]) (*connect.Response[v1.CreateRoomCodeResponse], error) {
	return c.createRoomCode.CallUnary(ctx, req)
}

// CreateRoomCodeForRole calls roomcodes.v1.RoomCodesService.CreateRoomCodeForRole.
func (c *roomCodesServiceClient) CreateRoomCodeForRole(ctx context.Context, req *connect.Request[v1.CreateRoomCodeForRoleRequest]) (*connect.Response[v1.CreateRoomCodeForRoleResponse], error) {
	return c.createRoomCodeForRole.CallUnary(ctx, req)
}

// UpdateRoomCode calls roomcodes.v1.RoomCodesService.UpdateRoomCode.
func (c *roomCodesServiceClient) UpdateRoomCode(ctx context.Context, req *connect.Request[v1.UpdateRoomCodeRequest]) (*connect.Response[v1.UpdateRoomCodeResponse], error) {
	return c.updateRoomCode.CallUnary(ctx, req)
}

// CreateShortCodeAuthToken calls roomcodes.v1.RoomCodesService.CreateShortCodeAuthToken.
func (c *roomCodesServiceClient) CreateShortCodeAuthToken(ctx context.Context, req *connect.Request[v1.CreateShortCodeAuthTokenRequest]) (*connect.Response[v1.CreateShortCodeAuthTokenResponse], error) {
	return c.createShortCodeAuthToken.CallUnary(ctx, req)
}

// RoomCodesServiceHandler is an implementation of the roomcodes.v1.RoomCodesService service.
type RoomCodesServiceHandler interface {
	GetRoomCodes(context.Context, *connect.Request[v1.GetRoomCodesRequest]) (*connect.Response[v1.GetRoomCodesResponse], error)
	CreateRoomCode(context.Context, *connect.Request[v1.CreateRoomCodeRequest]) (*connect.Response[v1.CreateRoomCodeResponse], error)
	CreateRoomCodeForRole(context.Context, *connect.Request[v1.CreateRoomCodeForRoleRequest]) (*connect.Response[v1.CreateRoomCodeForRoleResponse], error)
	UpdateRoomCode(context.Context, *connect.Request[v1.UpdateRoomCodeRequest]) (*connect.Response[v1.UpdateRoomCodeResponse], error)
	CreateShortCodeAuthToken(context.Context, *connect.Request[v1.CreateShortCodeAuthTokenRequest]) (*connect.Response[v1.CreateShortCodeAuthTokenResponse], error)
}

// NewRoomCodesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomCodesServiceHandler(svc RoomCodesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomCodesServiceGetRoomCodesHandler := connect.NewUnaryHandler(
		RoomCodesServiceGetRoomCodesProcedure,
		svc.GetRoomCodes,
		connect.WithSchema(roomCodesServiceGetRoomCodesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomCodesServiceCreateRoomCodeHandler := connect.NewUnaryHandler(
		RoomCodesServiceCreateRoomCodeProcedure,
		svc.CreateRoomCode,
		connect.WithSchema(roomCodesServiceCreateRoomCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomCodesServiceCreateRoomCodeForRoleHandler := connect.NewUnaryHandler(
		RoomCodesServiceCreateRoomCodeForRoleProcedure,
		svc.CreateRoomCodeForRole,
		connect.WithSchema(roomCodesServiceCreateRoomCodeForRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomCodesServiceUpdateRoomCodeHandler := connect.NewUnaryHandler(
		RoomCodesServiceUpdateRoomCodeProcedure,
		svc.UpdateRoomCode,
		connect.WithSchema(roomCodesServiceUpdateRoomCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomCodesServiceCreateShortCodeAuthTokenHandler := connect.NewUnaryHandler(
		RoomCodesServiceCreateShortCodeAuthTokenProcedure,
		svc.CreateShortCodeAuthToken,
		connect.WithSchema(roomCodesServiceCreateShortCodeAuthTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/roomcodes.v1.RoomCodesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomCodesServiceGetRoomCodesProcedure:
			roomCodesServiceGetRoomCodesHandler.ServeHTTP(w, r)
		case RoomCodesServiceCreateRoomCodeProcedure:
			roomCodesServiceCreateRoomCodeHandler.ServeHTTP(w, r)
		case RoomCodesServiceCreateRoomCodeForRoleProcedure:
			roomCodesServiceCreateRoomCodeForRoleHandler.ServeHTTP(w, r)
		case RoomCodesServiceUpdateRoomCodeProcedure:
			roomCodesServiceUpdateRoomCodeHandler.ServeHTTP(w, r)
		case RoomCodesServiceCreateShortCodeAuthTokenProcedure:
			roomCodesServiceCreateShortCodeAuthTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomCodesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomCodesServiceHandler struct{}

func (UnimplementedRoomCodesServiceHandler) GetRoomCodes(context.Context, *connect.Request[v1.GetRoomCodesRequest]) (*connect.Response[v1.GetRoomCodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("roomcodes.v1.RoomCodesService.GetRoomCodes is not implemented"))
}

func (UnimplementedRoomCodesServiceHandler) CreateRoomCode(context.Context, *connect.Request[v1.CreateRoomCodeRequest]) (*connect.Response[v1.CreateRoomCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("roomcodes.v1.RoomCodesService.CreateRoomCode is not implemented"))
}

func (UnimplementedRoomCodesServiceHandler) CreateRoomCodeForRole(context.Context, *connect.Request[v1.CreateRoomCodeForRoleRequest]) (*connect.Response[v1.CreateRoomCodeForRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("roomcodes.v1.RoomCodesService.CreateRoomCodeForRole is not implemented"))
}

func (UnimplementedRoomCodesServiceHandler) UpdateRoomCode(context.Context, *connect.Request[v1.UpdateRoomCodeRequest]) (*connect.Response[v1.UpdateRoomCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("roomcodes.v1.RoomCodesService.UpdateRoomCode is not implemented"))
}

func (UnimplementedRoomCodesServiceHandler) CreateShortCodeAuthToken(context.Context, *connect.Request[v1.CreateShortCodeAuthTokenRequest]) (*connect.Response[v1.CreateShortCodeAuthTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("roomcodes.v1.RoomCodesService.CreateShortCodeAuthToken is not implemented"))
}
